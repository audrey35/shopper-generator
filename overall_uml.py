class Controller(object):
    def __init__(self, configuration):
        self.configuration = configuration
        self.shopper_table = None
        self.shopper_database = None

    def generate_shopper_table(self):
        self.shopper_table = ShopperTable(self.configuration)
        self.shopper_table.generate_shopper_table()

    def export_shopper_table_as_csv(self):
        self.shopper_table.export_shopper_table_as_csv()

    def populate_shopper_database(self):
        if self.shopper_table == None:
            self.generate_shopper_table()
        data_frame = self.shopper_table.get_data_frame()
        self.shopper_database = ShopperDatabase(self.configuration)
        self.shopper_database.populate_shopper_database(data_frame)

    def query(self, query_dict):
        self.shopper_database.query(query_dict)

    def get_database_collection(self):
        return self.shopper_database.get_database_collection()

class ShopperTable(object):
    def __init__(self, configuration):
        self.configuration = configuration
        self.data_frame = None

    def generate_shopper_table(self):
        """
        Place main in ShopperModel package in this method.
        This will run everything inside ShopperModel.
        :return: At the end of this method, nothing gets returned
        but an actual data frame should be assigned to self.data_frame
        """


    def export_shopper_table_as_csv(self):
        if self.data_frame == None:
            self.generate_shopper_table()
        self.data_frame.export_shopper_table_as_csv()

class ShopperDatabase(object):
    def __init__(self, configuration):
        self.configuration = configuration
        self.database = None
        self.collection = None

    def populate_shopper_database(self, data_frame):
        """
        place code from convert_to_mongodb.py
        :param data_frame: pandas data frame generated by ShopperTable.
        :return: Nothing is returned but self.database and self.collection
        each have been instantiated with actual connection to database and collection.
        """

    def query(self, query_dict):
        """
        use code from query_mongodb.py
        :param query_dict: dictionary used to query the database.
        :return: Not sure. Print the selection? Return selection count?
        """

    def get_database_collection(self):
        """
        Returns the database connection and collection connection objects
        as a tuple.
        :return: database connection and collection connection objects
        """
        return self.database, self.collection


class Configuration(object):
    def __init__(self):
        self.variables
        self.placeholder
